package com.busanit501.hello_project._2todo.service;

import com.busanit501.hello_project._2todo.dto.TodoDTO;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// [C] Todo 서비스의 단일 인스턴스를 제공하라.
// [P] + 서비스 계층의 일관성 및 싱글턴 패턴 구현(V, >>)
// [F] (일관성/관례, +, >>) enum을 사용하여 싱글턴을 보장함으로써, 여러 객체가 생성되는 것을 방지하고 서비스 계층의 일관성을 유지한다. 결과적으로 메모리 낭비와 동기화 문제를 예방한다.
// [T] enum, 싱글턴, 이름/구조 변경 가능
// [R]
// ┌─────────────┬──────────────┬──────────────────────────────────────────────┐
// │ 관계        │ 방향         │ 대상                                         │
// ├─────────────┼──────────────┼──────────────────────────────────────────────┤
// │ ** 연관     │ ← 호출됨     │ TodoListController.java, TodoReadController.java │
// └─────────────┴──────────────┴──────────────────────────────────────────────┘
// 레이어: [Service][Controller]
// 설명: 컨트롤러에서 서비스의 메서드를 호출하여 비즈니스 로직을 처리함
public enum TodoService {
    // [C] TodoService의 단일 인스턴스를 선언하라.
    // [P] + 싱글턴 패턴 구현(서비스 객체의 중복 생성을 방지) (F: 일관성, 효율성)
    // [F] (일관성/효율성, +) INSTANCE 상수를 통해 단일 인스턴스만 생성되도록 하여, 서비스 계층의 일관성과 효율성을 높인다.
    // [T] enum 상수, 변경 불가
    // [R]
    // ┌─────────────┬──────────────┬─────────────────────────────┐
    // │ 관계        │ 방향         │ 대상                        │
    // ├─────────────┼──────────────┼─────────────────────────────┤
    // │ ** 연관     │ ← 호출됨     │ TodoListController.java, TodoReadController.java │
    // └─────────────┴──────────────┴─────────────────────────────┘
    // 레이어: [Service][Controller]
    // 설명: 컨트롤러에서 서비스의 INSTANCE를 참조하여 메서드를 호출함
    INSTANCE;

    // [C] Todo 등록 기능을 구현하라.
    // [P] + 신규 Todo 데이터 저장(업무 흐름의 시작점) (F: 데이터 입력, 업무 흐름)
    // [F] (데이터 입력/업무 흐름, +) 사용자가 입력한 TodoDTO를 받아 등록 과정을 시작한다. 실제 저장은 미구현이지만, 입력 데이터의 유효성 및 흐름을 확인할 수 있다.
    // [T] 메서드, void, 파라미터/로직 변경 가능
    // [R]
    // ┌─────────────┬──────────────┬──────────────────────────────────────────────┐
    // │ 관계        │ 방향         │ 대상                                         │
    // ├─────────────┼──────────────┼──────────────────────────────────────────────┤
    // │ ** 연관     │ ← 호출됨     │ TodoRegController.java#register()            │
    // └─────────────┴──────────────┴──────────────────────────────────────────────┘
    // 레이어: [Service][Controller]
    // 설명: 컨트롤러에서 서비스의 register()를 호출하여 Todo 등록 로직을 위임함
    public void register(TodoDTO todoDTO) {
        System.out.println("서비스에서 작성할 글의 입력 데이터 확인 : "
                +todoDTO);
    }

    // [C] 전체 Todo 목록을 조회하는 기능을 구현하라.
    // [P] + 전체 데이터 조회(사용자에게 전체 목록 제공) (F: 데이터 조회, 사용자 편의)
    // [F] (데이터 조회/사용자 편의, +) 전체 Todo 데이터를 리스트로 반환하여, 사용자가 모든 Todo를 한눈에 볼 수 있게 한다. 결과적으로 업무 파악과 관리가 용이해진다.
    // [T] 메서드, List<TodoDTO>, 반환타입/로직 변경 가능
    // [R]
    // ┌─────────────┬──────────────┬──────────────────────────────────────────────┐
    // │ 관계        │ 방향         │ 대상                                         │
    // ├─────────────┼──────────────┼──────────────────────────────────────────────┤
    // │ ** 연관     │ ← 호출됨     │ TodoListController.java#doGet()              │
    // └─────────────┴──────────────┴──────────────────────────────────────────────┘
    // 레이어: [Service][Controller]
    // 설명: 컨트롤러에서 서비스의 getList()를 호출하여 전체 Todo 목록을 가져감
    public List<TodoDTO> getList() {

        // [C] 더미 Todo 리스트를 생성하라.
        // [P] + 테스트 데이터 제공(실제 DB 연동 전 임시 데이터) (F: 테스트 용이성)
        // [F] (테스트 용이성, +) 실제 DB가 준비되지 않은 상황에서, 더미 데이터를 생성하여 전체 조회 기능을 미리 테스트할 수 있다.
        // [T] 지역 변수, List<TodoDTO>, 변경 가능
        // [R]
        // ┌─────────────┬──────────────┬─────────────────────────────┐
        // │ 관계        │ 방향         │ 대상                        │
        // ├─────────────┼──────────────┼─────────────────────────────┤
        // │ * 독립      │ -            │ (테스트/개발 초기 단계)      │
        // └─────────────┴──────────────┴─────────────────────────────┘
        // 레이어: [Service]
        // 설명: 실제 DB 연동 전, 독립적으로 동작하는 테스트용 더미 데이터 생성
        List<TodoDTO> list = new ArrayList<>();
        for (int i =0 ; i <10 ; i++){
            TodoDTO todoDTO = new TodoDTO();
            todoDTO.setTno((long)i);
            todoDTO.setTitle("Todo.." +i);
            todoDTO.setDueDate(LocalDate.now());
        }
        
        // [C] 빌더 패턴을 사용하여 더미 Todo 리스트를 생성하라.
        // [P] + 코드 간결성 및 가독성 향상(^, >>) (F: 빌더 패턴, 가독성)
        // [F] (가독성, ^, >>) IntStream과 mapToObj, collect를 활용해 반복문을 대체함으로써, 코드가 간결해지고 가독성이 높아진다. 결과적으로 유지보수와 확장성이 좋아진다.
        // [T] 지역 변수, List<TodoDTO>, 변경 가능
        // [R]
        // ┌─────────────┬──────────────┬─────────────────────────────┐
        // │ 관계        │ 방향         │ 대상                        │
        // ├─────────────┼──────────────┼─────────────────────────────┤
        // │ * 독립      │ -            │ (테스트/개발 초기 단계)      │
        // └─────────────┴──────────────┴─────────────────────────────┘
        // 레이어: [Service]
        // 설명: 실제 DB 연동 전, 독립적으로 동작하는 테스트용 더미 데이터 생성
       List<TodoDTO> todoDTOList2 = IntStream.range(0,10).mapToObj(i -> {
            TodoDTO todoDTO = new TodoDTO();
            todoDTO.setTno((long)i);
            todoDTO.setTitle("Todo.." +i);
            todoDTO.setDueDate(LocalDate.now());
            return todoDTO;
        }).collect(Collectors.toList());

        // [C] 더미 리스트 대신 빌더 패턴 리스트를 반환하라.
        // [P] V 실제 작동 확인(빌더 패턴의 결과를 반환) (F: 작동 확인)
        // [F] (작동 확인, V) 빌더 패턴으로 생성된 리스트가 정상적으로 반환되는지 확인할 수 있다.
        // [T] 반환값, List<TodoDTO>, 변경 가능
        // [R]
        // ┌─────────────┬──────────────┬──────────────────────────────────────────────┐
        // │ 관계        │ 방향         │ 대상                                         │
        // ├─────────────┼──────────────┼──────────────────────────────────────────────┤
        // │ ** 연관     │ → 반환       │ TodoListController.java#doGet()              │
        // └─────────────┴──────────────┴──────────────────────────────────────────────┘
        // 레이어: [Service][Controller]
        // 설명: 서비스에서 생성한 리스트를 컨트롤러로 반환하여 화면에 전달함
        return todoDTOList2;
    }

    // [C] tno로 Todo를 하나 조회하는 기능을 구현하라.
    // [P] + 특정 데이터 조회(상세 정보 제공) (F: 데이터 조회, 상세 정보)
    // [F] (데이터 조회/상세 정보, +) tno 값을 받아 해당 Todo의 상세 정보를 반환한다. 결과적으로 사용자는 원하는 Todo의 세부 정보를 확인할 수 있다.
    // [T] 메서드, TodoDTO, 반환타입/로직 변경 가능
    // [R]
    // ┌─────────────┬──────────────┬──────────────────────────────────────────────┐
    // │ 관계        │ 방향         │ 대상                                         │
    // ├─────────────┼──────────────┼──────────────────────────────────────────────┤
    // │ ** 연관     │ ← 호출됨     │ TodoReadController.java#doGet()              │
    // └─────────────┴──────────────┴──────────────────────────────────────────────┘
    // 레이어: [Service][Controller]
    // 설명: 컨트롤러에서 서비스의 getTodoByTno()를 호출하여 특정 Todo의 상세 정보를 가져감
    public TodoDTO getTodoByTno(long tno) {
        // [C] TodoDTO 객체를 생성하고 값을 할당하라.
        // [P] + 테스트 데이터 제공(실제 DB 연동 전 임시 데이터) (F: 테스트 용이성)
        // [F] (테스트 용이성, +) 실제 DB가 준비되지 않은 상황에서, 더미 데이터를 생성하여 상세 조회 기능을 미리 테스트할 수 있다.
        // [T] 지역 변수, TodoDTO, 변경 가능
        // [R]
        // ┌─────────────┬──────────────┬─────────────────────────────┐
        // │ 관계        │ 방향         │ 대상                        │
        // ├─────────────┼──────────────┼─────────────────────────────┤
        // │ * 독립      │ -            │ (테스트/개발 초기 단계)      │
        // └─────────────┴──────────────┴─────────────────────────────┘
        // 레이어: [Service]
        // 설명: 실제 DB 연동 전, 독립적으로 동작하는 테스트용 더미 데이터 생성
        TodoDTO todoDTO = new TodoDTO();
        todoDTO.setTno(tno);
        todoDTO.setTitle("샘플 Todo ");
        todoDTO.setDueDate(LocalDate.now());
        todoDTO.setFinished(true);
        return todoDTO;
    }
}
